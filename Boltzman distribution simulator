#Original version - random work w/o constraint
A<-matrix(10, nrow=20, ncol=20)
n<-100000

for (i in 1:n) {
  grid.from = sample(1:20, 2, replace=T)
  grid.to = sample(1:20, 2, replace=T)
  while (A[grid.from[1], grid.from[2]]==0) {
    grid.from = sample(1:20, 2, replace=T)
  }
  #gird.from == grid.to인 경우 없게 하면 더 빨라질 듯
  A[grid.from[1], grid.from[2]] = A[grid.from[1], grid.from[2]] -1
  A[grid.to[1], grid.to[2]] = A[grid.to[1], grid.to[2]] +1
}

result <- data.frame(table(A))

x=as.numeric(result$A)
y=result$Freq
plot(x, y, type='h', log='y')



#One shot version - random work w/ chess pawn constraint
B <- matrix(10, nrow=20, ncol=20)
m <- 10000000

for (i in 1:m) {
  grid.from = sample(1:20, 2, replace=T)
  while (B[grid.from[1], grid.from[2]]==0) {
    grid.from = sample(1:20, 2, replace=T)
  }

  B[grid.from[1], grid.from[2]] = B[grid.from[1], grid.from[2]] -1
  
  #gird 좌표가 1이나 20인지 확인 필요하는 함수.
  outcheck = function (x) {if (x==1) {return (1)} else if (x==20) {return (-1)} else return(0)}
  check <- c(outcheck(grid.from[1]), outcheck(grid.from[2]))
    
  grid.move = c(0,0)
  grid.to = c(0,0)
  move <- sample(c(-1,1), 1)
  XorY <- sample(c(1,2), 1)
  
  while(((check[1]*move==-1) & (XorY==1)) | ((check[2]*move==-1) & (XorY=2))) {
    move <- sample(c(-1,1), 1)
    XorY <- sample(c(1,2), 1)
  }
  
  grid.move[XorY] <- move
  grid.to = grid.from + grid.move
  B[grid.to[1], grid.to[2]] = B[grid.to[1], grid.to[2]] +1
}

result2 <- data.frame(table(B))

x=as.numeric(result2$B)
y=result2$Freq
plot(x, y, type='h', log='y')
